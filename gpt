set -euo pipefail

SOURCE_DIR="$(dirname $0)"

source "$SOURCE_DIR/api-key"

SYSTEM_INPUT="You are a helpful assistant but your answers are short line you are a robot. You don't omit useful information but you don't repeat the question and you don't use filler words or try to be polite. When the context is not clear, it's most likely related to computer programming."

echo "What's your question?"

if [ -z "${USER_INPUT:-}" ]; then
  USER_INPUT="$(cat)"
fi

: Create the request JSON

REQUEST_JSON="$(jq \
    --raw-input \
    --compact-output \
    --null-input \
    --arg model "$MODEL" \
    --arg input "$USER_INPUT" \
    --argjson max_tokens "$MAX_TOKENS" \
    --arg system "$SYSTEM_INPUT" \
    '{model: $model, messages: [{role: "system", content: $system}, {role: "user", content: $input}], temperature: 0, max_tokens: $max_tokens}')"

# echo "Request JSON: $(echo "$REQUEST_JSON" | jq .)""

: Send the request:

echo "Sending request..."

RESPONSE_JSON="$(curl https://api.openai.com/v1/chat/completions \
  --silent \
  --header "Content-Type: application/json" \
  --header "Authorization: Bearer $OPENAI_API_KEY" \
  --data "$REQUEST_JSON")"

ERROR="$(echo "$RESPONSE_JSON" | jq --raw-output '.error.message')"

if [ "$ERROR" != "null" ]; then
  echo "ERROR: $RESPONSE_JSON" >&2
  exit 1
fi

# echo "Response JSON: $(echo "$RESPONSE_JSON" | jq .)""

: Parse the response

ANSWER="$(echo "$RESPONSE_JSON" | jq --raw-output '.choices[] | .message.content')"

echo "Answer:"
echo
echo "$ANSWER"
echo

USAGE_TOKENS="$(echo "$RESPONSE_JSON" | jq '.usage.total_tokens')"

if [ "$MODEL" = "gpt-4" ]; then
  GPT4_COST_CENTS="$(echo "$RESPONSE_JSON" | jq '.usage | (0.003 * .prompt_tokens) + (0.006 * .completion_tokens)')"
  printf "GPT-4 cost: %g cents\n" "$GPT4_COST_CENTS"
fi

if [ "$MODEL" = "gpt-3.5-turbo" ]; then
  GPT35_COST_CENTS="$(echo "$RESPONSE_JSON" | jq '.usage | (0.0002 * .total_tokens)')"
  printf "GPT-3.5 cost: %g cents\n" "$GPT35_COST_CENTS"
fi

: Log the interaction

LOG_JSON="$(jq \
    --raw-input \
    --compact-output \
    --null-input \
    --arg timestamp "$(date +"%Y-%m-%d %H:%M:%S")" \
    --arg request "$REQUEST_JSON" \
    --arg response "$RESPONSE_JSON" \
    '{timestamp: $timestamp, request: $request, response: $response}')"

echo "$LOG_JSON" >> "$SOURCE_DIR/log"
